// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum AuthType {
  google
  facebook
  form
}

enum EventType {
  BIRTHDAY
  WEDDING
  ANNIVERSARY
  BABY_SHOWER
  OTHER
}

model User {
  id Int @id @default(autoincrement())
  password    String   @unique
  username    String
  email       String  @unique
  //password    String?  @default("none")
  profilePic  String?  @default("none")
  authType    AuthType @default(google)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  registeries Registry[] @relation("UserRegistry")
  comments Comment[] @relation("UserComments")
  address UserAddress[]  @relation("UserAddress")
  
}

model UserAddress{
  id Int @id @default(autoincrement())
  userId Int
  user User @relation("UserAddress",fields: [userId], references: [id], onDelete: Cascade)
  addressLine1 String
  addressLine2 String? 
  landmark String
  pincode Int
  city String
  country String
}


model Group {
  id          Int     @id @default(autoincrement())
  userId      Int
  groupName   String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  OWNER
  MEMBER
}

model UserGroup {
  id Int @id @default(autoincrement())
  userId Int
  groupId Int
  role  Role
  
}


model Event {
  id          Int     @id @default(autoincrement())
  userId      Int
  eventName   String
  description String
  eventType   EventType  @default(OTHER)
  venue       String? @default("NA")
  date        String? @default("NA")
  sharedGroup Int?     @default(-1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments Comment[]    @relation("EventComments")
  
}

model UserEvents{
  id Int @id @default(autoincrement())
  userId Int
  eventId Int
  role String
}

model Registry{
  id Int @id @default(autoincrement())
  name String
  userId Int
  user User @relation("UserRegistry",fields: [userId], references: [id], onDelete: Cascade)
  eventId Int?
  gifts Gift[] @relation("RegistryGifts")

}

model Gift{
  id Int @id @default(autoincrement())
  giftName String 
  giftUrl String  
  price Int 
  registryId Int
  Image String ? 
  registry Registry @relation("RegistryGifts",fields: [registryId], references: [id], onDelete: Cascade)
  giftStatus Boolean @default(false)
}

model  UserGifts {
  id Int @id @default(autoincrement())
  userId Int 
  giftId Int  
}


model Comment {
  id         Int      @id @default(autoincrement())
  commentText String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  parentId   Int?  
  userId     Int 
  user   User    @relation("UserComments",fields: [userId], references: [id], onDelete: Cascade)
  eventId    Int
  event  Event   @relation("EventComments",fields: [eventId], references: [id], onDelete: Cascade)
  parent Comment? @relation("CommentToParent", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentToParent")
  @@index([userId])
  @@index([eventId])
}